"body_tightening_50ml",
"overnight_renewal_50ml",
"neck_decollete_2oz",
"asc_none",
"asc_none_thecount",
"position2",
"position3",
"position4",
"position5",
"position6",
"position7",
"position8",
"position9",
"position10",
#"alpha",
"gamma",
"scale")
gDIST <- c()
#Starting Values
FC <- c(rep(0,length(gVarNamesFixed)-3),0.5,0.5)
svN <- c()
# ------------------
# ITERATION SETTINGS
# ------------------
gNCREP    <- 100000      # Number of iterations to use prior to convergence
gNEREP    <- 25000         # Number of iterations to keep for averaging after convergence has been reached
gNSKIP    <- 1		       # Number of iterations to do in between retaining draws for averaging
gINFOSKIP <- 250           # How frequently to print info about the iteration process
control <- list(
modelname=modelname,
gVarNamesNormal=gVarNamesNormal,
gVarNamesFixed =gVarNamesFixed,
gDIST=gDIST,
svN=svN,
FC=FC,
gNCREP=gNCREP,
gNEREP=gNEREP,
gNSKIP=gNSKIP,gINFOSKIP=gINFOSKIP,
rhoF=1e-04,
nodiagnostics=F
)
#matrix of alternative utilities (nRespondents, nAlternatives)
V <- matrix(0,nrow(choicedata),ncol(choices))
# the log-likelihood function
likelihood <- function(fc,b)
{
cc <- 1
bserum2   <- fc[cc]; cc <- cc + 1
bserum3   <- fc[cc]; cc <- cc + 1
bserum4   <- fc[cc]; cc <- cc + 1
bserum5   <- fc[cc]; cc <- cc + 1
bserum6   <- fc[cc]; cc <- cc + 1
bserum7   <- fc[cc]; cc <- cc + 1
bserum8   <- fc[cc]; cc <- cc + 1
bserum9   <- fc[cc]; cc <- cc + 1
bserum10  <- fc[cc]; cc <- cc + 1
bserum11  <- fc[cc]; cc <- cc + 1
bserum12  <- fc[cc]; cc <- cc + 1
bserum13  <- fc[cc]; cc <- cc + 1
bserum14  <- fc[cc]; cc <- cc + 1
bserum15  <- fc[cc]; cc <- cc + 1
bserum16  <- fc[cc]; cc <- cc + 1
bserum17  <- fc[cc]; cc <- cc + 1
bserum18  <- fc[cc]; cc <- cc + 1
bserum19  <- fc[cc]; cc <- cc + 1
bserum20  <- fc[cc]; cc <- cc + 1
bserum21  <- fc[cc]; cc <- cc + 1
bserum22  <- fc[cc]; cc <- cc + 1
bserum23  <- fc[cc]; cc <- cc + 1
bserum24  <- fc[cc]; cc <- cc + 1
bserum25  <- fc[cc]; cc <- cc + 1
bserum26  <- fc[cc]; cc <- cc + 1
bnone     <- fc[cc]; cc <- cc + 1
bexp      <- fc[cc]; cc <- cc + 1
bpos2     <- fc[cc]; cc <- cc + 1
bpos3     <- fc[cc]; cc <- cc + 1
bpos4     <- fc[cc]; cc <- cc + 1
bpos5     <- fc[cc]; cc <- cc + 1
bpos6     <- fc[cc]; cc <- cc + 1
bpos7     <- fc[cc]; cc <- cc + 1
bpos8     <- fc[cc]; cc <- cc + 1
bpos9     <- fc[cc]; cc <- cc + 1
bpos10    <- fc[cc]; cc <- cc + 1
alpha     <- 0.5#exp(fc[cc])/(exp(fc[cc])+1);cc<-cc+1
gamma     <- exp(fc[cc]);cc<-cc+1
scale     <- exp(fc[cc]);cc<-cc+1
V[,1] <- bserum2  * a1serum2 + bserum3  * a1serum3 + bserum4  * a1serum4 + bserum5  * a1serum5 + bserum6  * a1serum6 + bserum7  * a1serum7 + bserum8  * a1serum8 + bserum9  * a1serum9 + bserum10 * a1serum10 + bserum11 * a1serum11 + bserum12 * a1serum12 + bserum13 * a1serum13 + bserum14 * a1serum14 + bserum15 * a1serum15 + bserum16 * a1serum16 + bserum17 * a1serum17 + bserum18 * a1serum18 + bserum19 * a1serum19 + bserum20 * a1serum20 + bserum21 * a1serum21 + bserum22 * a1serum22 + bserum23 * a1serum23 + bserum24 * a1serum24 + bserum25 * a1serum25 + bserum26 * a1serum26 + bpos2 * a1pos2 + bpos3 * a1pos3 + bpos4 * a1pos4 + bpos5 * a1pos5 + bpos6 * a1pos6 + bpos7 * a1pos7 + bpos8 * a1pos8 + bpos9 * a1pos9 + bpos10 * a1pos10 + bnone + bexp * thecount + (alpha-1) * log(a1expenditure / (a1price * gamma) + 1) - log(a1price)
V[,2] <- bserum2  * a2serum2 + bserum3  * a2serum3 + bserum4  * a2serum4 + bserum5  * a2serum5 + bserum6  * a2serum6 + bserum7  * a2serum7 + bserum8  * a2serum8 + bserum9  * a2serum9 + bserum10 * a2serum10 + bserum11 * a2serum11 + bserum12 * a2serum12 + bserum13 * a2serum13 + bserum14 * a2serum14 + bserum15 * a2serum15 + bserum16 * a2serum16 + bserum17 * a2serum17 + bserum18 * a2serum18 + bserum19 * a2serum19 + bserum20 * a2serum20 + bserum21 * a2serum21 + bserum22 * a2serum22 + bserum23 * a2serum23 + bserum24 * a2serum24 + bserum25 * a2serum25 + bserum26 * a2serum26 + bpos2 * a2pos2 + bpos3 * a2pos3 + bpos4 * a2pos4 + bpos5 * a2pos5 + bpos6 * a2pos6 + bpos7 * a2pos7 + bpos8 * a2pos8 + bpos9 * a2pos9 + bpos10 * a2pos10 + bnone + bexp * thecount + (alpha-1) * log(a2expenditure / (a2price * gamma) + 1) - log(a2price)
V[,3] <- bserum2  * a3serum2 + bserum3  * a3serum3 + bserum4  * a3serum4 + bserum5  * a3serum5 + bserum6  * a3serum6 + bserum7  * a3serum7 + bserum8  * a3serum8 + bserum9  * a3serum9 + bserum10 * a3serum10 + bserum11 * a3serum11 + bserum12 * a3serum12 + bserum13 * a3serum13 + bserum14 * a3serum14 + bserum15 * a3serum15 + bserum16 * a3serum16 + bserum17 * a3serum17 + bserum18 * a3serum18 + bserum19 * a3serum19 + bserum20 * a3serum20 + bserum21 * a3serum21 + bserum22 * a3serum22 + bserum23 * a3serum23 + bserum24 * a3serum24 + bserum25 * a3serum25 + bserum26 * a3serum26 + bpos2 * a3pos2 + bpos3 * a3pos3 + bpos4 * a3pos4 + bpos5 * a3pos5 + bpos6 * a3pos6 + bpos7 * a3pos7 + bpos8 * a3pos8 + bpos9 * a3pos9 + bpos10 * a3pos10 + bnone + bexp * thecount + (alpha-1) * log(a3expenditure / (a3price * gamma) + 1) - log(a3price)
V[,4] <- bserum2  * a4serum2 + bserum3  * a4serum3 + bserum4  * a4serum4 + bserum5  * a4serum5 + bserum6  * a4serum6 + bserum7  * a4serum7 + bserum8  * a4serum8 + bserum9  * a4serum9 + bserum10 * a4serum10 + bserum11 * a4serum11 + bserum12 * a4serum12 + bserum13 * a4serum13 + bserum14 * a4serum14 + bserum15 * a4serum15 + bserum16 * a4serum16 + bserum17 * a4serum17 + bserum18 * a4serum18 + bserum19 * a4serum19 + bserum20 * a4serum20 + bserum21 * a4serum21 + bserum22 * a4serum22 + bserum23 * a4serum23 + bserum24 * a4serum24 + bserum25 * a4serum25 + bserum26 * a4serum26 + bpos2 * a4pos2 + bpos3 * a4pos3 + bpos4 * a4pos4 + bpos5 * a4pos5 + bpos6 * a4pos6 + bpos7 * a4pos7 + bpos8 * a4pos8 + bpos9 * a4pos9 + bpos10 * a4pos10 + bnone + bexp * thecount + (alpha-1) * log(a4expenditure / (a4price * gamma) + 1) - log(a4price)
V[,5] <- bserum2  * a5serum2 + bserum3  * a5serum3 + bserum4  * a5serum4 + bserum5  * a5serum5 + bserum6  * a5serum6 + bserum7  * a5serum7 + bserum8  * a5serum8 + bserum9  * a5serum9 + bserum10 * a5serum10 + bserum11 * a5serum11 + bserum12 * a5serum12 + bserum13 * a5serum13 + bserum14 * a5serum14 + bserum15 * a5serum15 + bserum16 * a5serum16 + bserum17 * a5serum17 + bserum18 * a5serum18 + bserum19 * a5serum19 + bserum20 * a5serum20 + bserum21 * a5serum21 + bserum22 * a5serum22 + bserum23 * a5serum23 + bserum24 * a5serum24 + bserum25 * a5serum25 + bserum26 * a5serum26 + bpos2 * a5pos2 + bpos3 * a5pos3 + bpos4 * a5pos4 + bpos5 * a5pos5 + bpos6 * a5pos6 + bpos7 * a5pos7 + bpos8 * a5pos8 + bpos9 * a5pos9 + bpos10 * a5pos10 + bnone + bexp * thecount + (alpha-1) * log(a5expenditure / (a5price * gamma) + 1) - log(a5price)
V[,6] <- bserum2  * a6serum2 + bserum3  * a6serum3 + bserum4  * a6serum4 + bserum5  * a6serum5 + bserum6  * a6serum6 + bserum7  * a6serum7 + bserum8  * a6serum8 + bserum9  * a6serum9 + bserum10 * a6serum10 + bserum11 * a6serum11 + bserum12 * a6serum12 + bserum13 * a6serum13 + bserum14 * a6serum14 + bserum15 * a6serum15 + bserum16 * a6serum16 + bserum17 * a6serum17 + bserum18 * a6serum18 + bserum19 * a6serum19 + bserum20 * a6serum20 + bserum21 * a6serum21 + bserum22 * a6serum22 + bserum23 * a6serum23 + bserum24 * a6serum24 + bserum25 * a6serum25 + bserum26 * a6serum26 + bpos2 * a6pos2 + bpos3 * a6pos3 + bpos4 * a6pos4 + bpos5 * a6pos5 + bpos6 * a6pos6 + bpos7 * a6pos7 + bpos8 * a6pos8 + bpos9 * a6pos9 + bpos10 * a6pos10 + bnone + bexp * thecount + (alpha-1) * log(a6expenditure / (a6price * gamma) + 1) - log(a6price)
V[,7] <- bserum2  * a7serum2 + bserum3  * a7serum3 + bserum4  * a7serum4 + bserum5  * a7serum5 + bserum6  * a7serum6 + bserum7  * a7serum7 + bserum8  * a7serum8 + bserum9  * a7serum9 + bserum10 * a7serum10 + bserum11 * a7serum11 + bserum12 * a7serum12 + bserum13 * a7serum13 + bserum14 * a7serum14 + bserum15 * a7serum15 + bserum16 * a7serum16 + bserum17 * a7serum17 + bserum18 * a7serum18 + bserum19 * a7serum19 + bserum20 * a7serum20 + bserum21 * a7serum21 + bserum22 * a7serum22 + bserum23 * a7serum23 + bserum24 * a7serum24 + bserum25 * a7serum25 + bserum26 * a7serum26 + bpos2 * a7pos2 + bpos3 * a7pos3 + bpos4 * a7pos4 + bpos5 * a7pos5 + bpos6 * a7pos6 + bpos7 * a7pos7 + bpos8 * a7pos8 + bpos9 * a7pos9 + bpos10 * a7pos10 + bnone + bexp * thecount + (alpha-1) * log(a7expenditure / (a7price * gamma) + 1) - log(a7price)
V[,8] <- bserum2  * a8serum2 + bserum3  * a8serum3 + bserum4  * a8serum4 + bserum5  * a8serum5 + bserum6  * a8serum6 + bserum7  * a8serum7 + bserum8  * a8serum8 + bserum9  * a8serum9 + bserum10 * a8serum10 + bserum11 * a8serum11 + bserum12 * a8serum12 + bserum13 * a8serum13 + bserum14 * a8serum14 + bserum15 * a8serum15 + bserum16 * a8serum16 + bserum17 * a8serum17 + bserum18 * a8serum18 + bserum19 * a8serum19 + bserum20 * a8serum20 + bserum21 * a8serum21 + bserum22 * a8serum22 + bserum23 * a8serum23 + bserum24 * a8serum24 + bserum25 * a8serum25 + bserum26 * a8serum26 + bpos2 * a8pos2 + bpos3 * a8pos3 + bpos4 * a8pos4 + bpos5 * a8pos5 + bpos6 * a8pos6 + bpos7 * a8pos7 + bpos8 * a8pos8 + bpos9 * a8pos9 + bpos10 * a8pos10 + bnone + bexp * thecount + (alpha-1) * log(a8expenditure / (a8price * gamma) + 1) - log(a8price)
V[,9] <- bserum2  * a9serum2 + bserum3  * a9serum3 + bserum4  * a9serum4 + bserum5  * a9serum5 + bserum6  * a9serum6 + bserum7  * a9serum7 + bserum8  * a9serum8 + bserum9  * a9serum9 + bserum10 * a9serum10 + bserum11 * a9serum11 + bserum12 * a9serum12 + bserum13 * a9serum13 + bserum14 * a9serum14 + bserum15 * a9serum15 + bserum16 * a9serum16 + bserum17 * a9serum17 + bserum18 * a9serum18 + bserum19 * a9serum19 + bserum20 * a9serum20 + bserum21 * a9serum21 + bserum22 * a9serum22 + bserum23 * a9serum23 + bserum24 * a9serum24 + bserum25 * a9serum25 + bserum26 * a9serum26 + bpos2 * a9pos2 + bpos3 * a9pos3 + bpos4 * a9pos4 + bpos5 * a9pos5 + bpos6 * a9pos6 + bpos7 * a9pos7 + bpos8 * a9pos8 + bpos9 * a9pos9 + bpos10 * a9pos10 + bnone + bexp * thecount + (alpha-1) * log(a9expenditure / (a9price * gamma) + 1) - log(a9price)
V[,10]<- bserum2  * a10serum2 + bserum3  * a10serum3 + bserum4  * a10serum4 + bserum5  * a10serum5 + bserum6  * a10serum6 + bserum7  * a10serum7 + bserum8  * a10serum8 + bserum9  * a10serum9 + bserum10 * a10serum10 + bserum11 * a10serum11 + bserum12 * a10serum12 + bserum13 * a10serum13 + bserum14 * a10serum14 + bserum15 * a10serum15 + bserum16 * a10serum16 + bserum17 * a10serum17 + bserum18 * a10serum18 + bserum19 * a10serum19 + bserum20 * a10serum20 + bserum21 * a10serum21 + bserum22 * a10serum22 + bserum23 * a10serum23 + bserum24 * a10serum24 + bserum25 * a10serum25 + bserum26 * a10serum26 + bpos2 * a10pos2 + bpos3 * a10pos3 + bpos4 * a10pos4 + bpos5 * a10pos5 + bpos6 * a10pos6 + bpos7 * a10pos7 + bpos8 * a10pos8 + bpos9 * a10pos9 + bpos10 * a10pos10 + bnone + bexp * thecount + (alpha-1) * log(a10expenditure / (a1price * gamma) + 1) - log(a10price)
V <- ( V >= 700 ) * 700 + ( V < 700 & V > -700 ) * V + ( V < -700 ) * -700
V <- exp(V/scale)
C_i <- (1-alpha)/(expenditures + gamma * prices)
term1 <- 1/(scale^(total.choices-1))
term2 <- C_i ^ discrete.choices
term2 <- exp(rowSums(log(term2))) * (1 - alpha) / none.expenditures
term3 <- 1/C_i * discrete.choices
term3 <- rowSums(term3) + none.expenditures / (1 - alpha)
# Utility for the none option
Vnone <- 0
Vnone <- exp((Vnone + (alpha-1) * log(none.expenditures))/scale)
term4 <- (V) ^ discrete.choices
term4 <- exp(rowSums(log(term4)))
term4_1 <- term4 * Vnone
term4_2 <- V
term4_2 <- rowSums(term4_2) + Vnone
term4_2 <- term4_2 ^ total.choices
term4 <-  term4_1 /  term4_2
term5 <- factorial(total.choices-1)
# choice model likelihood
P <- term1 * term2 * term3 * term4 * term5
return(P)
}
doHB(likelihood, choicedata, control)
FC <- c(rep(0,length(gVarNamesFixed)-2),0.5,0.5)
control <- list(
modelname=modelname,
gVarNamesNormal=gVarNamesNormal,
gVarNamesFixed =gVarNamesFixed,
gDIST=gDIST,
svN=svN,
FC=FC,
gNCREP=gNCREP,
gNEREP=gNEREP,
gNSKIP=gNSKIP,gINFOSKIP=gINFOSKIP,
rhoF=1e-04,
nodiagnostics=F
)
doHB(likelihood, choicedata, control)
plot(0.9^(1:10))
plot(0.9^(1:100))
1e(1:10)
1e-100
1e-700
1e-400
1e-200
1e-300
1e-3550
1e-355
1e-325
1e-315
1e-319
sqrt(1e-319)
sqrt(1e-3355)
sqrt(1e-355)
sqrt(1e-100)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
runif(1)
runif(1)
library(RSGHB)
library(RSGHB)
library(RSGHB)
1e-332
1e-323
library(RSGHB)
1-F
1-T
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
exp(-700)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
r <- 3
rr <- 4
env <- parent.frame()
env["r"]
env[["r"]]
env[["rr"]]
s <- 3
ttt <- 3
env[["t"]]
env[["ttt"]]
env$t
env$ttt
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
control
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
if (5=3)
if (5==5){1+1}
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library("RSGHB", lib.loc="C:/Program Files/R/R-2.15.3/library")
detach("package:RSGHB", unload=TRUE)
is.na(NA)
library(RSGHB)
temp <- c(4,2,3,1)
sort(temp)
sort(temp)==temp
sort(temp)=temp
sort(temp)==temp
sum(sort(temp)==temp)==length(temp)
library(RSGHB)
# ------------------
# Code for a Multinomial Logit Model with Random Coefficients
#
# Jeff Dumont
#
# ------------------
library(RSGHB)
setwd("C:/Work/Code/HB/RSGHB.git/Examples/Basic Example - MNL")          	    # working directory
# ------------------
# DATA PREPARATION
# ------------------
# assumes that respondents are identified with a ID column
# also assumes that the data is sorted by respondent then experiment
choicedata <- read.table("Data_simulated.dat",sep="\t",header=T)
# Specify any variables here that you'd like to use in the
# utility equations in the likelihood function below
# These can be any variables within the data or transformations of
# those variables
TT1     <- choicedata$tt1
TT2     <- choicedata$tt2
TOLL2   <- choicedata$toll2
# The choice vectors
# Dummying coding the choice vector allows for easier coding of the
# the likelihood calculations. So we will have one column for each
# alternative in the design
choice1    <- (choicedata$Choice==1)
choice2    <- (choicedata$Choice==2)
# ------------------
# ESTIMATION CONTROL
# Setting control list for estimation
# ?doHB for more estimation options
# ------------------
modelname <- "MNL"            # used for output
# Names for the Random Variables
gVarNamesNormal <- c("ASC1","BTime","BCost")
# For each random variable, specify the distribution for its coefficient
# The options are:
# 1. normal
# 2. log-nomal
# 3. negative log-normal
# 4. normal with all values below zero massed at zero
# 5. Johnson SB with a specified min and max
# gDIST must have an entry for each value in gVarNamesNormal
gDIST <- c(1,1,1)
# STARTING VALUES
svN <- c(0,0,0)               # for the random coefficients
# The selection of the mean here is important when working with non-normal distributions
# ITERATION SETTINGS
gNCREP    <- 30000           # Number of iterations to use prior to convergence
gNEREP    <- 20000 	          # Number of iterations to keep for averaging after convergence has been reached
gNSKIP    <- 1			     # Number of iterations to do in between retaining draws for averaging
gINFOSKIP <- 250              # How frequently to print info about the iteration process
# CONTROL LIST TO PASS TO doHB
control <- list(
modelname=modelname,
gVarNamesNormal=gVarNamesNormal,
gDIST=gDIST,
svN=svN,
gNCREP=gNCREP,
gNEREP=gNEREP,
gNSKIP=gNSKIP,gINFOSKIP=gINFOSKIP,
nodiagnostics=T
)
# ------------------
# likelihood
# USE:     Calculates the likelihood of choice | B
#          Returns likelihood values for each observation
# NOTES:   This is where the bulk of the computation resides so coding this efficiently
#	      is essential to reducing run time.
# ------------------
likelihood <- function(fc,b)
{
# random coefficients
cc     <- 1
ASC1   <- b[,cc];cc<-cc+1
Btime  <- b[,cc];cc<-cc+1
Btoll  <- b[,cc];cc<-cc+1
v1 <- ASC1       + Btime * TT1
v2 <-              Btime * TT2 + Btoll * TOLL2
p  <- (exp(v1)*choice1 + exp(v2)*choice2) / (exp(v1) + exp(v2))
return(p)
}
# Estimate the model
doHB(likelihood, choicedata, control)
# ------------------
# Code for a Multinomial Logit Model with Random Coefficients
#
# Jeff Dumont
#
# ------------------
library(RSGHB)
setwd("C:/Work/Code/HB/RSGHB.git/Examples/Basic Example - MNL")          	    # working directory
# ------------------
# DATA PREPARATION
# ------------------
# assumes that respondents are identified with a ID column
# also assumes that the data is sorted by respondent then experiment
choicedata <- read.table("Data_simulated.dat",sep="\t",header=T)
# Specify any variables here that you'd like to use in the
# utility equations in the likelihood function below
# These can be any variables within the data or transformations of
# those variables
TT1     <- choicedata$tt1
TT2     <- choicedata$tt2
TOLL2   <- choicedata$toll2
# The choice vectors
# Dummying coding the choice vector allows for easier coding of the
# the likelihood calculations. So we will have one column for each
# alternative in the design
choice1    <- (choicedata$Choice==1)
choice2    <- (choicedata$Choice==2)
# ------------------
# ESTIMATION CONTROL
# Setting control list for estimation
# ?doHB for more estimation options
# ------------------
modelname <- "MNL"            # used for output
# Names for the Random Variables
gVarNamesNormal <- c("ASC1","BTime","BCost")
# For each random variable, specify the distribution for its coefficient
# The options are:
# 1. normal
# 2. log-nomal
# 3. negative log-normal
# 4. normal with all values below zero massed at zero
# 5. Johnson SB with a specified min and max
# gDIST must have an entry for each value in gVarNamesNormal
gDIST <- c(1,1,1)
# STARTING VALUES
svN <- c(0,0,0)               # for the random coefficients
# The selection of the mean here is important when working with non-normal distributions
# ITERATION SETTINGS
gNCREP    <- 30000           # Number of iterations to use prior to convergence
gNEREP    <- 20000 	          # Number of iterations to keep for averaging after convergence has been reached
gNSKIP    <- 1			     # Number of iterations to do in between retaining draws for averaging
gINFOSKIP <- 250              # How frequently to print info about the iteration process
# CONTROL LIST TO PASS TO doHB
control <- list(
modelname=modelname,
gVarNamesNormal=gVarNamesNormal,
gDIST=gDIST,
svN=svN,
gNCREP=gNCREP,
gNEREP=gNEREP,
gNSKIP=gNSKIP,gINFOSKIP=gINFOSKIP,
nodiagnostics=T
)
# ------------------
# likelihood
# USE:     Calculates the likelihood of choice | B
#          Returns likelihood values for each observation
# NOTES:   This is where the bulk of the computation resides so coding this efficiently
#	      is essential to reducing run time.
# ------------------
likelihood <- function(fc,b)
{
# random coefficients
cc     <- 1
ASC1   <- b[,cc];cc<-cc+1
Btime  <- b[,cc];cc<-cc+1
Btoll  <- b[,cc];cc<-cc+1
v1 <- ASC1       + Btime * TT1
v2 <-              Btime * TT2 + Btoll * TOLL2
p  <- (exp(v1)*choice1 + exp(v2)*choice2) / (exp(v1) + exp(v2))
return(p)
}
# Estimate the model
doHB(likelihood, choicedata, control)
library(RSGHB)
?doHB
?lm
?plot
library(RSGHB)
data(choicedata)
choicedata
library(RSGHB)
data(choicedata)
choicedata
library(RSGHB)
detach(RSGHB)
detach("RSGHB")
detach("package:RSGHB", unload=TRUE)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
library(RSGHB)
plotLog(paste("example1\",modelname,sep=""))
plotLog(paste("example1\",modelname,sep=""))
paste("example1\",modelname,sep="")
plotLog(paste("example1//",modelname,sep=""))
library(RSGHB)
# ------------------
# DATA PREPARATION
# ------------------
# assumes that respondents are identified with a ID column
# also assumes that the data is sorted by respondent then experiment
choicedata <- read.table("C://Work//Code//HB//RSGHB.git//RSGHB//vignettes//example1//data_simulated.dat",sep="\t",header=T)
# Specify any variables here that you'd like to use in the
# utility equations in the likelihood function below
# These can be any variables within the data or transformations of
# those variables
TT1     <- choicedata$tt1
TT2     <- choicedata$tt2
TOLL2   <- choicedata$toll2
# The choice vectors
# Dummying coding the choice vector allows for easier coding of the
# the likelihood calculations. So we will have one column for each
# alternative in the design
choice1    <- (choicedata$Choice==1)
choice2    <- (choicedata$Choice==2)
# plots the contents of the log file
plotLog(paste("C://Work//Code//HB//RSGHB.git//RSGHB//vignettes//example1//",modelname,sep=""))
modelname
modelName
# ------------------
# ESTIMATION CONTROL
# ------------------
# Setting control list for estimation (see ?doHB for more estimation options)
modelname <- "MNL"          # used for output
# Names for the fixed variables
gVarNamesFixed <- c("ASC1","BTime","BCost")
# STARTING VALUES
FC <- c(0,0,0)                  # for the fixed coefficients
# ITERATION SETTINGS
# Number of iterations to use prior to convergence
gNCREP    <- 30000
# Number of iterations to keep for averaging after convergence has been reached
gNEREP    <- 20000
# Number of iterations to do in between retaining draws for averaging
gNSKIP    <- 1
# How frequently to print info about the iteration process
gINFOSKIP <- 250
# CONTROL LIST TO PASS TO doHB
control <- list(
modelname=modelname,
gVarNamesFixed=gVarNamesFixed,
FC=FC,
gNCREP=gNCREP,
gNEREP=gNEREP,
gNSKIP=gNSKIP,gINFOSKIP=gINFOSKIP,
nodiagnostics=T
)
# plots the contents of the log file
plotLog(paste("C://Work//Code//HB//RSGHB.git//RSGHB//vignettes//example1//",modelname,sep=""))
# plots the contents of the log file
setwd("C://Work//Code//HB//RSGHB.git//RSGHB//vignettes//example1//" )
plotLog(modelname)
setwd("C://Work//Code//HB//RSGHB.git//RSGHB//vignettes
")
setwd("C://Work//Code//HB//RSGHB.git//RSGHB//vignettes")
setwd("C:/Work/Code/HB/RSGHB.git/Examples/Basic Example - MNL with fixed parameters")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
qpdf
install.packages(qpdf)
install.packages("qpdf")
